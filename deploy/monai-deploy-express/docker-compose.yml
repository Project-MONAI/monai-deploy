# Copyright 2022 MONAI Consortium
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

services:
  minio:
    image: $MINIO_IMAGE
    hostname: $MINIO_HOSTNAME
    container_name: $MINIO_CONTAINERNAME
    command: server --console-address ":9001" /data
    volumes:
      - $MINIO_DATA:/data
      - $MINIO_CONFIG:/root/.minio
    ports:
      - $MINIO_API_PORT:9000
      - $MINIO_CONSOLE_PORT:9001
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    networks:
      monaideploy:
          ipv4_address: $MINIO_IP
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 5

  rabbitmq:
    image: $RABBITMQ_IMAGE
    hostname: $RABBITMQ_HOSTNAME
    container_name: $RABBITMQ_CONTAINERNAME
    environment:
      RABBITMQ_ERLANG_COOKIE: "SWQOKODSQALRPCLNMEQG"
      RABBITMQ_DEFAULT_USER: "admin"
      RABBITMQ_DEFAULT_PASS: "admin"
      RABBITMQ_DEFAULT_VHOST: "monaideploy"
    ports:
      - $RABBITMQ_PORT:5672
      - $RABBITMQ_MGT_PORT:15672
    volumes:
      - $RABBITMQ_DATA:/var/lib/rabbitmq/mnesia/
    networks:
      monaideploy:
          ipv4_address: $RABBITMQ_IP
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 5

  mongodb:
    image: $MONGODB_IMAGE
    hostname: $MONGODB_HOSTNAME
    container_name: $MONGODB_CONTAINERNAME
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
    ports:
      - $MONGODB_PORT:27017
    volumes:
      - $MONGODB_DATA:/data/db
    networks:
      monaideploy:
          ipv4_address: $MONGODB_IP
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/productiondb --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
      
  orthanc:
    image: $ORTHANC_IMAGE
    hostname: $ORTHANC_HOSTNAME
    container_name: $ORTHANC_CONTAINERNAME
    volumes:
      - ./configs/orthanc.json:/etc/orthanc/orthanc.json
      - $ORTHANC_DATA:/var/lib/orthanc/db/
    ports:
      - $ORTHANC_SCP_PORT:4242
      - $ORTHANC_UI_PORT:8042
    environment:
      VERBOSE_ENABLED: "true"
      DICOM_WEB_PLUGIN_ENABLED: "true"
      CONNECTIVITY_CHECKS_PLUGIN_ENABLED: "true"
    networks:
      monaideploy:
          ipv4_address: $ORTHANC_IP
    healthcheck:
      test: ["CMD", "/probes/test-aliveness.py"]
      start_period: 10s
      retries: 5
      interval: 10s
      timeout: 30s

  informatics-gateway:
    image: $INFORMATICS_GATEWAY_IMAGE
    hostname: $INFORMATICS_GATEWAY_HOSTNAME
    container_name: $INFORMATICS_GATEWAY_CONTAINERNAME
    user: root:root
    volumes:
      - ./configs/informatics-gateway.json:/opt/monai/ig/appsettings.json
      - ./configs/nlog.config:/opt/monai/ig/nlog.config
      # - $MONAI_DEPLOY_PLUGINS:/opt/monai/ig/plug-ins/
      - $INFORMATICS_GATEWAY_PAYLOADS:/payloads
      - $INFORMATICS_GATEWAY_DATABASE:/database/
    environment:
      ASPNETCORE_URLS: http://+:5000
      LOGSTASH_URL: tcp://$LOGSTASH_HOSTNAME:$LOGSTASH_PORT
    ports:
      - $INFORMATICS_GATEWAY_SCP_PORT:104
      - $INFORMATICS_GATEWAY_HL7_PORT:2575
      - $INFORMATICS_GATEWAY_API_PORT:5000
    networks:
      monaideploy:
          ipv4_address: $INFORMATICS_GATEWAY_API_IP
    depends_on:
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    links:
      - minio
      - rabbitmq
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 10

  configure-ig:
    image: $INFORMATICS_GATEWAY_CONFIG_IMAGE
    container_name: $INFORMATICS_GATEWAY_CFG_CONTAINERNAME
    networks:
      monaideploy:
          ipv4_address: $INFORMATICS_GATEWAY_API_CONFIG_IP
    volumes:
      - ./configs/config-ig.sh:/init.sh
    depends_on:
      informatics-gateway:
        condition: service_healthy
      orthanc:
        condition: service_healthy
    entrypoint: 
      - /bin/sh
      - ./init.sh 
      - $INFORMATICS_GATEWAY_API_IP
      - "5000"
      - $INFORMATICS_GATEWAY_AE_TITLE
      - $ORTHANC_IP
      - "4242"
    links:
      - informatics-gateway

  workflow-manager:
    image: $WORKFLOW_MANAGER_IMAGE
    hostname: $WORKFLOW_MANAGER_HOSTNAME
    container_name: $WORKFLOW_MANAGER_CONTAINERNAME
    volumes:
      - ./configs/workflow-manager.json:/opt/monai/wm/appsettings.json
      # - $MONAI_DEPLOY_PLUGINS:/opt/monai/wm/plug-ins/
    environment:
      ASPNETCORE_URLS: http://+:5001
      LOGSTASH_URL: tcp://$LOGSTASH_HOSTNAME:$LOGSTASH_PORT
    ports:
      - $WORKFLOW_MANAGER_PORT:5001
    networks:
      monaideploy:
          ipv4_address: $WORKFLOW_MANAGER_IP
    depends_on:
      informatics-gateway:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    links:
      - minio
      - rabbitmq
      - informatics-gateway
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 10
  
  task-manager:
    image: $TASK_MANAGER_IMAGE
    hostname: $TASK_MANAGER_HOSTNAME
    container_name: $TASK_MANAGER_CONTAINERNAME
    volumes:
      - ./configs/task-manager.json:/opt/monai/wm/appsettings.json
      - $TASK_MANAGER_DATA:/var/lib/mde/:rw
      - /var/run/docker.sock:/var/run/docker.sock
      # - $MONAI_DEPLOY_PLUGINS:/opt/monai/wm/plug-ins/
    environment:
      ASPNETCORE_URLS: http://+:5002
      HOST_TEMP_STORAGE : $TASK_MANAGER_DATA
      LOGSTASH_URL: tcp://$LOGSTASH_HOSTNAME:$LOGSTASH_PORT
    ports:
      - $TASK_MANAGER_PORT:5002
    networks:
      monaideploy:
          ipv4_address: $TASK_MANAGER_IP
    depends_on:
      mongodb:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    links:
      - minio
      - rabbitmq
      - mongodb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      start_period: 10s
      interval: 5s
      timeout: 30s
      retries: 10

  elasticsearch:
    profiles: [ 'elk', 'all' ]
    image: $ELASTICSEARCH_IMAGE
    hostname: $ELASTICSEARCH_HOSTNAME
    container_name: $ELASTICSEARCH_CONTAINERNAME
    volumes:
      - ./configs/logging/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - .md/esdata:/usr/share/elasticsearch/data:rw,z # update init.sh to initialize the host directory
    ports:
      - $ELASTIC_PORT:9200
      - $ELASTIC_PORT_COMM:9300
    environment:
      ELASTIC_PASSWORD: ${ELASTICSEARCH_PASSWORD:-}
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      discovery.type: single-node
      ELASTIC_CLIENT_APIVERSIONING: "true"
    networks:
      monaideploy:
          ipv4_address: $ELASTICSEARCH_IP
    healthcheck:
      test: curl -s http://$ELASTICSEARCH_HOSTNAME:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  logstash:
    profiles: [ 'elk', 'all' ]
    image: $LOGSTASH_IMAGE
    hostname: $LOGSTASH_HOSTNAME
    container_name: $LOGSTASH_CONTAINERNAME
    volumes:
      - ./configs/logging/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./configs/logging/pipeline.yml:/usr/share/logstash/config/pipeline.yml:ro,Z
      - ./configs/logging/pipeline:/usr/share/logstash/pipeline:ro
    ports:
      # - "5044:5044" 
      - "$LOGSTASH_PORT:50000/tcp"
      - "$LOGSTASH_PORT:50000/udp"
      - "$LOGSTASH_PORT_API:9600"
    environment:
      LOGSTASH_INTERNAL_PASSWORD: ${ELASTICSEARCH_PASSWORD:-}
      LS_JAVA_OPTS: "-Xmx2g -Xms2g"
    depends_on:
      elasticsearch:
        condition: service_healthy
    links:
      - elasticsearch
    networks:
      monaideploy:
          ipv4_address: $LOGSTASH_IP

  kibana:
    profiles: [ 'elk', 'all' ]
    image: $KIBANA_IMAGE
    hostname: $KIBANA_HOSTNAME
    container_name: $KIBANA_CONTAINERNAME
    volumes:
      - ./configs/logging/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - $KIBANA_PORT:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${ELASTICSEARCH_PASSWORD:-}
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      monaideploy:
          ipv4_address: $KIBANA_IP
    healthcheck:
      test: curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'
      interval: 10s
      timeout: 10s
      retries: 120

  kibana-setup:
    profiles: [ 'elk', 'all' ]
    image: $KIBANA_CONFIG_IMAGE
    container_name: $KIBANA_CFG_CONTAINERNAME
    volumes:
      - ./configs/logging/kibana.ndjson:/usr/share/kibana.ndjson
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    networks:
      monaideploy:
          ipv4_address: $KIBANA_CFG_IP
    entrypoint: >
      /bin/sh -c "
      curl -X POST http://$KIBANA_HOSTNAME:5601/api/saved_objects/_import?createNewCopies=true -H 'kbn-xsrf: true' --form file=@/usr/share/kibana.ndjson
      "

networks:
  monaideploy:
    name: monaideploy
    driver: bridge
    ipam:
     config:
       - subnet: $SUBNET
         gateway: $GATEWAY
